{
    "component element": {
        "prefix": "component",
        "body": [
            "<component :is=\"${1:componentId}\"></component>$0"
        ],
        "description": "component element"
    },
    "transition element": {
        "prefix": "v:transition",
        "body": [
            "<transition$1>",
            "$2",
            "</transition>$0"
        ],
        "description": "transition element"
    },
    "transition-group element": {
        "prefix": "v:transitionGroup",
        "body": [
            "<transition-group$1>",
            "$2",
            "</transition-group>"
        ],
        "description": "transition-group element"
    },
    "transition enter-from-class": {
        "prefix": "v:enterFromClass",
        "body": [
            "$2enter-from-class=\"$1\"$0"
        ],
        "description": "enter-from-class=''. Expects: string."
    },
    "transition leave-from-class": {
        "prefix": "v:leaveFromClass",
        "body": [
            "$2leave-from-class=\"$1\"$0"
        ],
        "description": "leave-from-class=''. Expects: string."
    },
    "transition appear-class": {
        "prefix": "v:appearClass",
        "body": [
            "$2appear-class=\"$1\"$0"
        ],
        "description": "appear-class=''. Expects: string."
    },
    "transition enter-to-class": {
        "prefix": "v:enterToClass",
        "body": [
            "$2enter-to-class=\"$1\"$0"
        ],
        "description": "enter-to-class=''. Expects: string."
    },
    "transition leave-to-class": {
        "prefix": "v:leaveToClass",
        "body": [
            "$2leave-to-class=\"$1\"$0"
        ],
        "description": "leave-to-class=''. Expects: string."
    },
    "transition appear-to-class": {
        "prefix": "v:appearToClass",
        "body": [
            "$2appear-to-class=\"$1\"$0"
        ],
        "description": "appear-to-class=''. Expects: string."
    },
    "transition enter-active-class": {
        "prefix": "v:enterActiveClass",
        "body": [
            "$2enter-active-class=\"$1\"$0"
        ],
        "description": "enter-active-class=''. Expects: string."
    },
    "transition leave-active-class": {
        "prefix": "v:leaveActiveClass",
        "body": [
            "$2leave-active-class=\"$1\"$0"
        ],
        "description": "leave-active-class=''. Expects: string."
    },
    "transition appear-active-class": {
        "prefix": "v:appearActiveClass",
        "body": [
            "$2appear-active-class=\"$1\"$0"
        ],
        "description": "appear-active-class=''. Expects: string."
    },
    "transition before-enter": {
        "prefix": "v:beforeEnterEvent",
        "body": [
            "@before-enter=\"$1\"$0"
        ],
        "description": "@before-enter=''"
    },
    "transition before-leave": {
        "prefix": "v:beforeLeaveEvent",
        "body": [
            "@before-leave=\"$1\"$0"
        ],
        "description": "@before-leave=''"
    },
    "transition enter": {
        "prefix": "v:enterEvent",
        "body": [
            "@enter=\"$1\"$0"
        ],
        "description": "@enter=''"
    },
    "transition leave": {
        "prefix": "v:leaveEvent",
        "body": [
            "@leave=\"$1\"$0"
        ],
        "description": "@leave=''"
    },
    "transition appear": {
        "prefix": "v:appearEvent",
        "body": [
            "@appear=\"$1\"$0"
        ],
        "description": "@appear=''"
    },
    "transition after-enter": {
        "prefix": "v:afterEnterEvent",
        "body": [
            "@after-enter=\"$1\"$0"
        ],
        "description": "@after-enter=''"
    },
    "transition after-leave": {
        "prefix": "v:afterLeaveEvent",
        "body": [
            "@after-leave=\"$1\"$0"
        ],
        "description": "@after-leave=''"
    },
    "transition after-appear": {
        "prefix": "v:afterAppearEvent",
        "body": [
            "@after-appear=\"$1\"$0"
        ],
        "description": "@after-appear=''"
    },
    "transition enter-cancelled": {
        "prefix": "v:enterCancelledEvent",
        "body": [
            "@enter-cancelled=\"$1\"$0"
        ],
        "description": "@enter-cancelled=''"
    },
    "transition leave-cancelled": {
        "prefix": "v:leaveCancelledEvent",
        "body": [
            "@leave-cancelled=\"$1\"$0"
        ],
        "description": "@leave-cancelled='' (v-show only)"
    },
    "transition appear-cancelled": {
        "prefix": "v:appearCancelledEvent",
        "body": [
            "@appear-cancelled=\"$1\"$0"
        ],
        "description": "@appear-cancelled=''"
    },
    "keep-alive element": {
        "prefix": "v:keepAlive",
        "body": [
            "<keep-alive$1>",
            "$2",
            "</keep-alive>$0"
        ],
        "description": "keep-alive element"
    },
    "slot element": {
        "prefix": "v:slot",
        "body": [
            "<slot$1>$2</slot>$0"
        ],
        "description": "<slot></slot>. Expects: string. Used on content inserted into child components to indicate which named slot the content belongs to."
    },
    "router link element": {
        "prefix": "v:routerLink",
        "body": [
            "<router-link ${1|to,:to|}=\"$2\">$3</router-link>$0"
        ],
        "description": "<router-link to=''></router-link>. router-link element"
    },
    "router link to props": {
        "prefix": "v:to",
        "body": [
            "${1|to,:to|}=\"$2\"$0"
        ],
        "description": "to=''"
    },
    "v-text": {
        "prefix": "v:text",
        "body": [
            "v-text=\"${1:msg}\""
        ],
        "description": "Updates the element’s textContent."
    },
    "v-html": {
        "prefix": "v:html",
        "body": [
            "v-html=\"${1:html}\""
        ],
        "description": "Updates the element’s innerHTML."
    },
    "v-show": {
        "prefix": "v:show",
        "body": [
            "v-show=\"${1:condition}\""
        ],
        "description": "Toggles the element's display CSS property"
    },
    "v-if": {
        "prefix": "v:if",
        "body": [
            "v-if=\"${1:condition}\""
        ],
        "description": "Conditionally render the element"
    },
    "v-else": {
        "prefix": "v:else",
        "body": [
            "v-else"
        ],
        "description": "Denote the `else block` for v-if or a v-if/v-else-if chain"
    },
    "v-else-if": {
        "prefix": "v:else-if",
        "body": [
            "v-else-if=\"${1:condition}\""
        ],
        "description": "Denote the `else if block` for v-if"
    },
    "v-for-without-key": {
        "prefix": "v:for-non-key",
        "body": [
            "v-for=\"${1:item} in ${2:items}\""
        ],
        "description": "Render the element or template block multiple times based on the source data."
    },
    "v-for": {
        "prefix": "v:for",
        "body": [
            "v-for=\"(${1:item}${2|\\, index,​|}) in ${3:items}\" :key=\"${4:index}\""
        ],
        "description": "Render the element or template block multiple times based on the source data."
    },
    "v-on": {
        "prefix": "v:on",
        "body": [
            "@${1:event}=\"${2:handle}\""
        ],
        "description": "Attaches an event listener to the element"
    },
    "v-bind": {
        "prefix": "v:bind",
        "body": [
            ":$1=\"${2}\""
        ],
        "description": "Dynamically bind one or more attributes, or a component prop to an expression."
    },
    "v-model": {
        "prefix": "v:model",
        "body": [
            "v-model=\"${1:value}\""
        ],
        "description": "Create a two-way binding."
    },
    "v-model:custom": {
        "prefix": "v:model:custom",
        "body": [
            "v-model:$1=\"${2:value}\""
        ],
        "description": "Create a two-way binding with custom identifier."
    },
    "v-slot": {
        "prefix": "v:slot",
        "body": [
            "#${1:slotName}=\"${2}\""
        ],
        "description": "Denote named slots or slots that expect to receive props."
    },
    "v-key": {
        "prefix": "v:key",
        "body": [
            ":key=\"${1:key}\""
        ],
        "description": "Expects: string. Children of the same common parent must have unique keys. Duplicate keys will cause render errors."
    },
    "v-ref": {
        "prefix": "v:ref",
        "body": [
            "ref=\"${1:reference}\"$0"
        ],
        "description": "Expects: string. ref is used to register a reference to an element or a child component. The reference will be registered under the parent component’s $refs object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance."
    }
}